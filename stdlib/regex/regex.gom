// GO-Minus Standard Library - Regex Package
package regex

import (
    "strings"
)

// RegexPattern represents a regular expression pattern.
class RegexPattern {
    private:
        string pattern
        bool caseSensitive
        bool multiline

        // Internal data structures created after compilation
        bool compiled
        string[] literals
        bool hasSpecialChars
        bool hasCaptureGroups
        int[] captureGroupIndices

    public:
        // New creates a new RegexPattern.
        static func New(pattern string, caseSensitive bool, multiline bool) *RegexPattern {
            rp := new RegexPattern()
            rp.pattern = pattern
            rp.caseSensitive = caseSensitive
            rp.multiline = multiline
            rp.compiled = false

            // Compile the pattern
            rp.compile()

            return rp
        }

        // Compile compiles the regular expression pattern.
        private func (rp *RegexPattern) compile() {
            if rp.compiled {
                return
            }

            // Analyze the pattern
            rp.analyzePattern()

            // Compilation completed
            rp.compiled = true
        }

        // AnalyzePattern analyzes the regular expression pattern.
        private func (rp *RegexPattern) analyzePattern() {
            // Check for special characters
            rp.hasSpecialChars = false
            for _, ch := range rp.pattern {
                if isSpecialChar(ch) {
                    rp.hasSpecialChars = true
                    break
                }
            }

            // Check for capture groups
            rp.hasCaptureGroups = false
            rp.captureGroupIndices = []int{}

            inGroup := false
            for i, ch := range rp.pattern {
                if ch == '(' && (i == 0 || rp.pattern[i-1] != '\\') {
                    inGroup = true
                    rp.hasCaptureGroups = true
                    rp.captureGroupIndices = append(rp.captureGroupIndices, i)
                } else if ch == ')' && inGroup && (i == 0 || rp.pattern[i-1] != '\\') {
                    inGroup = false
                }
            }

            // Create literal arrays for simple patterns
            if !rp.hasSpecialChars {
                rp.literals = []string{rp.pattern}
            } else {
                // More advanced analysis is needed for complex patterns
                // In this simple implementation, we only support simple patterns
                rp.literals = []string{}
            }
        }

        // Match matches a text with the regular expression pattern.
        func (rp *RegexPattern) Match(text string) bool {
            // Compile the pattern if not compiled
            if !rp.compiled {
                rp.compile()
            }

            // Convert text to lowercase for case-insensitive matching
            matchText := text
            matchPattern := rp.pattern

            if !rp.caseSensitive {
                matchText = strings.ToLower(matchText)
                matchPattern = strings.ToLower(matchPattern)
            }

            // Direct check for simple patterns
            if !rp.hasSpecialChars {
                return strings.Contains(matchText, matchPattern)
            }

            // More advanced matching is needed for complex patterns
            // In this simple implementation, we only support simple patterns
            return false
        }

        // FindAll finds all matches in a text.
        func (rp *RegexPattern) FindAll(text string) []string {
            // Compile the pattern if not compiled
            if !rp.compiled {
                rp.compile()
            }

            // Convert text to lowercase for case-insensitive matching
            matchText := text
            matchPattern := rp.pattern

            if !rp.caseSensitive {
                matchText = strings.ToLower(matchText)
                matchPattern = strings.ToLower(matchPattern)
            }

            // Direct search for simple patterns
            if !rp.hasSpecialChars {
                var results []string

                index := 0
                for {
                    index = strings.Index(matchText[index:], matchPattern)
                    if index == -1 {
                        break
                    }

                    results = append(results, text[index:index+len(matchPattern)])
                    index += len(matchPattern)
                }

                return results
            }

            // More advanced search is needed for complex patterns
            // In this simple implementation, we only support simple patterns
            return []string{}
        }

        // Replace replaces all matches in a text with the specified replacement.
        func (rp *RegexPattern) Replace(text string, replacement string) string {
            // Compile the pattern if not compiled
            if !rp.compiled {
                rp.compile()
            }

            // Direct replacement for simple patterns
            if !rp.hasSpecialChars {
                if rp.caseSensitive {
                    return strings.ReplaceAll(text, rp.pattern, replacement)
                } else {
                    // More complex operation is needed for case-insensitive replacement
                    // In this simple implementation, we only support simple replacements
                    return text
                }
            }

            // More advanced replacement is needed for complex patterns
            // In this simple implementation, we only support simple patterns
            return text
        }

        // Split splits a text with the regular expression pattern.
        func (rp *RegexPattern) Split(text string) []string {
            // Compile the pattern if not compiled
            if !rp.compiled {
                rp.compile()
            }

            // Direct split for simple patterns
            if !rp.hasSpecialChars {
                if rp.caseSensitive {
                    return strings.Split(text, rp.pattern)
                } else {
                    // More complex operation is needed for case-insensitive split
                    // In this simple implementation, we only support simple splits
                    return []string{text}
                }
            }

            // More advanced split is needed for complex patterns
            // In this simple implementation, we only support simple patterns
            return []string{text}
        }

        // GetPattern returns the regular expression pattern.
        func (rp *RegexPattern) GetPattern() string {
            return rp.pattern
        }

        // IsCaseSensitive returns whether the regular expression pattern is case-sensitive.
        func (rp *RegexPattern) IsCaseSensitive() bool {
            return rp.caseSensitive
        }

        // IsMultiline returns whether the regular expression pattern is multiline.
        func (rp *RegexPattern) IsMultiline() bool {
            return rp.multiline
        }
}

// Compile compiles a regular expression pattern.
func Compile(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, true, false)
}

// CompileIgnoreCase compiles a regular expression pattern with case insensitivity.
func CompileIgnoreCase(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, false, false)
}

// CompileMultiline compiles a regular expression pattern with multiline mode.
func CompileMultiline(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, true, true)
}

// Match matches a text with a regular expression pattern.
func Match(pattern string, text string) bool {
    regex := Compile(pattern)
    return regex.Match(text)
}

// MatchIgnoreCase matches a text with a regular expression pattern with case insensitivity.
func MatchIgnoreCase(pattern string, text string) bool {
    regex := CompileIgnoreCase(pattern)
    return regex.Match(text)
}

// Replace replaces all matches in a text with the specified replacement.
func Replace(pattern string, text string, replacement string) string {
    regex := Compile(pattern)
    return regex.Replace(text, replacement)
}

// Split splits a text with a regular expression pattern.
func Split(pattern string, text string) []string {
    regex := Compile(pattern)
    return regex.Split(text)
}

// isSpecialChar checks if a character is a regular expression special character.
func isSpecialChar(ch rune) bool {
    specialChars := "\\^$.|?*+()[{"
    for _, specialChar := range specialChars {
        if ch == specialChar {
            return true
        }
    }
    return false
}
