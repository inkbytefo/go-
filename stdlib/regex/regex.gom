// GO-Minus Standart Kütüphane - Regex Paketi
package regex

import (
    "strings"
)

// RegexPattern, bir düzenli ifade desenini temsil eder.
class RegexPattern {
    private:
        string pattern
        bool caseSensitive
        bool multiline
        
        // Derleme sonrası oluşturulan iç veri yapıları
        bool compiled
        string[] literals
        bool hasSpecialChars
        bool hasCaptureGroups
        int[] captureGroupIndices

    public:
        // New, yeni bir RegexPattern oluşturur.
        static func New(pattern string, caseSensitive bool, multiline bool) *RegexPattern {
            rp := new RegexPattern()
            rp.pattern = pattern
            rp.caseSensitive = caseSensitive
            rp.multiline = multiline
            rp.compiled = false
            
            // Deseni derle
            rp.compile()
            
            return rp
        }
        
        // Compile, düzenli ifade desenini derler.
        private func (rp *RegexPattern) compile() {
            if rp.compiled {
                return
            }
            
            // Deseni analiz et
            rp.analyzePattern()
            
            // Derleme tamamlandı
            rp.compiled = true
        }
        
        // AnalyzePattern, düzenli ifade desenini analiz eder.
        private func (rp *RegexPattern) analyzePattern() {
            // Özel karakterleri kontrol et
            rp.hasSpecialChars = false
            for _, ch := range rp.pattern {
                if isSpecialChar(ch) {
                    rp.hasSpecialChars = true
                    break
                }
            }
            
            // Yakalama gruplarını kontrol et
            rp.hasCaptureGroups = false
            rp.captureGroupIndices = []int{}
            
            inGroup := false
            for i, ch := range rp.pattern {
                if ch == '(' && (i == 0 || rp.pattern[i-1] != '\\') {
                    inGroup = true
                    rp.hasCaptureGroups = true
                    rp.captureGroupIndices = append(rp.captureGroupIndices, i)
                } else if ch == ')' && inGroup && (i == 0 || rp.pattern[i-1] != '\\') {
                    inGroup = false
                }
            }
            
            // Basit desenler için literal dizileri oluştur
            if !rp.hasSpecialChars {
                rp.literals = []string{rp.pattern}
            } else {
                // Karmaşık desenler için daha gelişmiş bir analiz gerekir
                // Bu basit implementasyonda, sadece basit desenleri destekliyoruz
                rp.literals = []string{}
            }
        }
        
        // Match, bir metni düzenli ifade deseniyle eşleştirir.
        func (rp *RegexPattern) Match(text string) bool {
            // Desen derlenmemişse, derle
            if !rp.compiled {
                rp.compile()
            }
            
            // Büyük/küçük harf duyarsız eşleştirme için metni küçük harfe çevir
            matchText := text
            matchPattern := rp.pattern
            
            if !rp.caseSensitive {
                matchText = strings.ToLower(matchText)
                matchPattern = strings.ToLower(matchPattern)
            }
            
            // Basit desenler için doğrudan kontrol
            if !rp.hasSpecialChars {
                return strings.Contains(matchText, matchPattern)
            }
            
            // Karmaşık desenler için daha gelişmiş bir eşleştirme gerekir
            // Bu basit implementasyonda, sadece basit desenleri destekliyoruz
            return false
        }
        
        // FindAll, bir metindeki tüm eşleşmeleri bulur.
        func (rp *RegexPattern) FindAll(text string) []string {
            // Desen derlenmemişse, derle
            if !rp.compiled {
                rp.compile()
            }
            
            // Büyük/küçük harf duyarsız eşleştirme için metni küçük harfe çevir
            matchText := text
            matchPattern := rp.pattern
            
            if !rp.caseSensitive {
                matchText = strings.ToLower(matchText)
                matchPattern = strings.ToLower(matchPattern)
            }
            
            // Basit desenler için doğrudan arama
            if !rp.hasSpecialChars {
                var results []string
                
                index := 0
                for {
                    index = strings.Index(matchText[index:], matchPattern)
                    if index == -1 {
                        break
                    }
                    
                    results = append(results, text[index:index+len(matchPattern)])
                    index += len(matchPattern)
                }
                
                return results
            }
            
            // Karmaşık desenler için daha gelişmiş bir arama gerekir
            // Bu basit implementasyonda, sadece basit desenleri destekliyoruz
            return []string{}
        }
        
        // Replace, bir metindeki tüm eşleşmeleri belirtilen metinle değiştirir.
        func (rp *RegexPattern) Replace(text string, replacement string) string {
            // Desen derlenmemişse, derle
            if !rp.compiled {
                rp.compile()
            }
            
            // Basit desenler için doğrudan değiştirme
            if !rp.hasSpecialChars {
                if rp.caseSensitive {
                    return strings.ReplaceAll(text, rp.pattern, replacement)
                } else {
                    // Büyük/küçük harf duyarsız değiştirme için daha karmaşık bir işlem gerekir
                    // Bu basit implementasyonda, sadece basit değiştirmeleri destekliyoruz
                    return text
                }
            }
            
            // Karmaşık desenler için daha gelişmiş bir değiştirme gerekir
            // Bu basit implementasyonda, sadece basit desenleri destekliyoruz
            return text
        }
        
        // Split, bir metni düzenli ifade deseniyle böler.
        func (rp *RegexPattern) Split(text string) []string {
            // Desen derlenmemişse, derle
            if !rp.compiled {
                rp.compile()
            }
            
            // Basit desenler için doğrudan bölme
            if !rp.hasSpecialChars {
                if rp.caseSensitive {
                    return strings.Split(text, rp.pattern)
                } else {
                    // Büyük/küçük harf duyarsız bölme için daha karmaşık bir işlem gerekir
                    // Bu basit implementasyonda, sadece basit bölmeleri destekliyoruz
                    return []string{text}
                }
            }
            
            // Karmaşık desenler için daha gelişmiş bir bölme gerekir
            // Bu basit implementasyonda, sadece basit desenleri destekliyoruz
            return []string{text}
        }
        
        // GetPattern, düzenli ifade desenini döndürür.
        func (rp *RegexPattern) GetPattern() string {
            return rp.pattern
        }
        
        // IsCaseSensitive, düzenli ifade deseninin büyük/küçük harf duyarlı olup olmadığını döndürür.
        func (rp *RegexPattern) IsCaseSensitive() bool {
            return rp.caseSensitive
        }
        
        // IsMultiline, düzenli ifade deseninin çok satırlı olup olmadığını döndürür.
        func (rp *RegexPattern) IsMultiline() bool {
            return rp.multiline
        }
}

// Compile, bir düzenli ifade desenini derler.
func Compile(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, true, false)
}

// CompileIgnoreCase, bir düzenli ifade desenini büyük/küçük harf duyarsız olarak derler.
func CompileIgnoreCase(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, false, false)
}

// CompileMultiline, bir düzenli ifade desenini çok satırlı olarak derler.
func CompileMultiline(pattern string) *RegexPattern {
    return RegexPattern.New(pattern, true, true)
}

// Match, bir metni düzenli ifade deseniyle eşleştirir.
func Match(pattern string, text string) bool {
    regex := Compile(pattern)
    return regex.Match(text)
}

// MatchIgnoreCase, bir metni büyük/küçük harf duyarsız olarak düzenli ifade deseniyle eşleştirir.
func MatchIgnoreCase(pattern string, text string) bool {
    regex := CompileIgnoreCase(pattern)
    return regex.Match(text)
}

// Replace, bir metindeki tüm eşleşmeleri belirtilen metinle değiştirir.
func Replace(pattern string, text string, replacement string) string {
    regex := Compile(pattern)
    return regex.Replace(text, replacement)
}

// Split, bir metni düzenli ifade deseniyle böler.
func Split(pattern string, text string) []string {
    regex := Compile(pattern)
    return regex.Split(text)
}

// isSpecialChar, bir karakterin düzenli ifade özel karakteri olup olmadığını kontrol eder.
func isSpecialChar(ch rune) bool {
    specialChars := "\\^$.|?*+()[{"
    for _, specialChar := range specialChars {
        if ch == specialChar {
            return true
        }
    }
    return false
}
