// GO-Minus Standard Library - Trie Package Test
package trie

import (
    "testing"
)

// TestTrieBasic contains basic tests for Trie<string>.
func TestTrieBasic(t *testing.T) {
    // Create a new Trie
    trie := Trie.New<string>()

    // Should be empty initially
    if !trie.IsEmpty() {
        t.Error("Newly created trie should be empty")
    }

    // Size should be 0
    if trie.Size() != 0 {
        t.Errorf("Expected size 0, got: %d", trie.Size())
    }

    // Add words
    trie.Insert("apple", "apple")
    trie.Insert("banana", "banana")
    trie.Insert("application", "application")

    // Size should be 3
    if trie.Size() != 3 {
        t.Errorf("Expected size 3, got: %d", trie.Size())
    }

    // Should no longer be empty
    if trie.IsEmpty() {
        t.Error("Trie should not be empty after adding elements")
    }

    // Search for words
    value, found := trie.Search("apple")
    if !found || value != "apple" {
        t.Errorf("Expected value 'apple', got: %s, found: %t", value, found)
    }

    value, found = trie.Search("banana")
    if !found || value != "banana" {
        t.Errorf("Expected value 'banana', got: %s, found: %t", value, found)
    }

    value, found = trie.Search("application")
    if !found || value != "application" {
        t.Errorf("Expected value 'application', got: %s, found: %t", value, found)
    }

    // Search for non-existent word
    _, found = trie.Search("orange")
    if found {
        t.Error("Non-existent word should not be found")
    }

    // Prefix check
    if !trie.StartsWith("app") {
        t.Error("Prefix 'app' should be found")
    }

    if trie.StartsWith("orange") {
        t.Error("Prefix 'orange' should not be found")
    }

    // Delete word
    if !trie.Delete("banana") {
        t.Error("Word 'banana' should be deleted")
    }

    // Size should be 2
    if trie.Size() != 2 {
        t.Errorf("Expected size 2, got: %d", trie.Size())
    }

    // Search for deleted word
    _, found = trie.Search("banana")
    if found {
        t.Error("Deleted word should not be found")
    }

    // Try to delete non-existent word
    if trie.Delete("orange") {
        t.Error("Non-existent word cannot be deleted")
    }

    // Get all words
    words := trie.GetAllWords()
    if len(words) != 2 {
        t.Errorf("Expected word count 2, got: %d", len(words))
    }

    if words["apple"] != "apple" || words["application"] != "application" {
        t.Error("All words are not correct")
    }

    // Get words with specific prefix
    appWords := trie.GetWordsWithPrefix("app")
    if len(appWords) != 2 {
        t.Errorf("Expected word count with prefix 'app' 2, got: %d", len(appWords))
    }

    if appWords["apple"] != "apple" || appWords["application"] != "application" {
        t.Error("Words with prefix 'app' are not correct")
    }

    // Clear the Trie
    trie.Clear()

    // Size should be 0
    if trie.Size() != 0 {
        t.Errorf("Expected size 0 after clearing, got: %d", trie.Size())
    }

    // Should be empty
    if !trie.IsEmpty() {
        t.Error("Trie should be empty after clearing")
    }
}

// TestTrieInt contains tests for Trie<int>.
func TestTrieInt(t *testing.T) {
    // Create a new Trie
    trie := Trie.New<int>()

    // Add words
    trie.Insert("one", 1)
    trie.Insert("two", 2)
    trie.Insert("three", 3)

    // Search for words
    value, found := trie.Search("one")
    if !found || value != 1 {
        t.Errorf("Expected value 1, got: %d, found: %t", value, found)
    }

    value, found = trie.Search("two")
    if !found || value != 2 {
        t.Errorf("Expected value 2, got: %d, found: %t", value, found)
    }

    value, found = trie.Search("three")
    if !found || value != 3 {
        t.Errorf("Expected value 3, got: %d, found: %t", value, found)
    }

    // Get all words
    words := trie.GetAllWords()
    if len(words) != 3 {
        t.Errorf("Expected word count 3, got: %d", len(words))
    }

    if words["one"] != 1 || words["two"] != 2 || words["three"] != 3 {
        t.Error("All words are not correct")
    }
}

// TestTrieEdgeCases contains edge case tests for Trie.
func TestTrieEdgeCases(t *testing.T) {
    // Create a new Trie
    trie := Trie.New<string>()

    // Add empty word
    trie.Insert("", "empty")

    // Search for empty word
    value, found := trie.Search("")
    if !found || value != "empty" {
        t.Errorf("Expected value 'empty', got: %s, found: %t", value, found)
    }

    // Add single character word
    trie.Insert("a", "letter a")

    // Search for single character word
    value, found = trie.Search("a")
    if !found || value != "letter a" {
        t.Errorf("Expected value 'letter a', got: %s, found: %t", value, found)
    }

    // Add long word
    longWord := "abcdefghijklmnopqrstuvwxyz"
    trie.Insert(longWord, "alphabet")

    // Search for long word
    value, found = trie.Search(longWord)
    if !found || value != "alphabet" {
        t.Errorf("Expected value 'alphabet', got: %s, found: %t", value, found)
    }

    // Update same word with different value
    trie.Insert("a", "new letter a")

    // Search for updated word
    value, found = trie.Search("a")
    if !found || value != "new letter a" {
        t.Errorf("Expected value 'new letter a', got: %s, found: %t", value, found)
    }
}
