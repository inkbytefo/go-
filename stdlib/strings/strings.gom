// GO+ Standard Library - Strings Package
package strings

import (
    "strings" // Use Go's strings package
)

// Contains checks if the string s contains the substring substr.
func Contains(s, substr string) bool {
    return strings.Contains(s, substr)
}

// ContainsAny checks if the string s contains any of the characters in the string chars.
func ContainsAny(s, chars string) bool {
    return strings.ContainsAny(s, chars)
}

// Count returns the number of non-overlapping instances of substr in s.
func Count(s, substr string) int {
    return strings.Count(s, substr)
}

// HasPrefix tests whether the string s begins with prefix.
func HasPrefix(s, prefix string) bool {
    return strings.HasPrefix(s, prefix)
}

// HasSuffix tests whether the string s ends with suffix.
func HasSuffix(s, suffix string) bool {
    return strings.HasSuffix(s, suffix)
}

// Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.
func Index(s, substr string) int {
    return strings.Index(s, substr)
}

// IndexAny returns the index of the first instance of any character from chars in s, or -1 if no character from chars is present in s.
func IndexAny(s, chars string) int {
    return strings.IndexAny(s, chars)
}

// Join concatenates the elements of elems to create a single string. The separator string sep is placed between elements in the resulting string.
func Join(elems []string, sep string) string {
    return strings.Join(elems, sep)
}

// LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s.
func LastIndex(s, substr string) int {
    return strings.LastIndex(s, substr)
}

// LastIndexAny returns the index of the last instance of any character from chars in s, or -1 if no character from chars is present in s.
func LastIndexAny(s, chars string) int {
    return strings.LastIndexAny(s, chars)
}

// Repeat returns a new string consisting of count copies of the string s.
func Repeat(s string, count int) string {
    return strings.Repeat(s, count)
}

// Replace returns a copy of the string s with the first n non-overlapping instances of old replaced by new.
// If n < 0, there is no limit on the number of replacements.
func Replace(s, old, new string, n int) string {
    return strings.Replace(s, old, new, n)
}

// ReplaceAll returns a copy of the string s with all non-overlapping instances of old replaced by new.
func ReplaceAll(s, old, new string) string {
    return strings.ReplaceAll(s, old, new)
}

// Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators.
func Split(s, sep string) []string {
    return strings.Split(s, sep)
}

// SplitN slices s into substrings separated by sep and returns a slice of the substrings between those separators.
// The count determines the number of substrings to return.
func SplitN(s, sep string, n int) []string {
    return strings.SplitN(s, sep, n)
}

// ToLower returns a copy of the string s with all Unicode letters mapped to their lower case.
func ToLower(s string) string {
    return strings.ToLower(s)
}

// ToUpper returns a copy of the string s with all Unicode letters mapped to their upper case.
func ToUpper(s string) string {
    return strings.ToUpper(s)
}

// Trim returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed.
func Trim(s, cutset string) string {
    return strings.Trim(s, cutset)
}

// TrimLeft returns a slice of the string s with all leading Unicode code points contained in cutset removed.
func TrimLeft(s, cutset string) string {
    return strings.TrimLeft(s, cutset)
}

// TrimRight returns a slice of the string s with all trailing Unicode code points contained in cutset removed.
func TrimRight(s, cutset string) string {
    return strings.TrimRight(s, cutset)
}

// TrimSpace returns a slice of the string s with all leading and trailing white space removed.
func TrimSpace(s string) string {
    return strings.TrimSpace(s)
}

// Builder is used to efficiently build a string using Write methods.
class Builder {
    private var builder strings.Builder

    // Write appends the contents of p to the builder's buffer.
    func (b *Builder) Write(p []byte) (int, error) {
        return b.builder.Write(p)
    }

    // WriteString appends the contents of s to the builder's buffer.
    func (b *Builder) WriteString(s string) (int, error) {
        return b.builder.WriteString(s)
    }

    // WriteByte appends the byte c to the builder's buffer.
    func (b *Builder) WriteByte(c byte) error {
        return b.builder.WriteByte(c)
    }

    // WriteRune appends the UTF-8 encoding of Unicode code point r to the builder's buffer.
    func (b *Builder) WriteRune(r rune) (int, error) {
        return b.builder.WriteRune(r)
    }

    // String returns the accumulated string.
    func (b *Builder) String() string {
        return b.builder.String()
    }

    // Len returns the number of accumulated bytes.
    func (b *Builder) Len() int {
        return b.builder.Len()
    }

    // Cap returns the capacity of the builder's underlying byte slice.
    func (b *Builder) Cap() int {
        return b.builder.Cap()
    }

    // Reset resets the Builder to be empty.
    func (b *Builder) Reset() {
        b.builder.Reset()
    }

    // Grow grows the builder's capacity by n bytes.
    func (b *Builder) Grow(n int) {
        b.builder.Grow(n)
    }
}