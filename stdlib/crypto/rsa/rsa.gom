// GO-Minus Standard Library - Crypto RSA Package
package rsa

import (
    "crypto"
    "crypto/rand"
    "crypto/rsa" // Use Go's crypto/rsa package
    "io"
)

// PublicKey represents an RSA public key.
class PublicKey {
    private:
        var goPublicKey *rsa.PublicKey
    
    public:
        // N is the modulus.
        var N *big.Int
        
        // E is the public exponent.
        var E int
        
        // FromGoPublicKey creates a PublicKey from a Go rsa.PublicKey.
        static func FromGoPublicKey(goKey *rsa.PublicKey) *PublicKey {
            return &PublicKey{
                goPublicKey: goKey,
                N: goKey.N,
                E: goKey.E,
            }
        }
        
        // ToGoPublicKey converts the PublicKey to a Go rsa.PublicKey.
        func ToGoPublicKey() *rsa.PublicKey {
            if this.goPublicKey != null {
                return this.goPublicKey
            }
            
            return &rsa.PublicKey{
                N: this.N,
                E: this.E,
            }
        }
        
        // Size returns the size of the modulus in bytes.
        func Size() int {
            return (this.N.BitLen() + 7) / 8
        }
}

// PrivateKey represents an RSA private key.
class PrivateKey {
    private:
        var goPrivateKey *rsa.PrivateKey
    
    public:
        // PublicKey is the public key corresponding to this private key.
        var PublicKey *PublicKey
        
        // D is the private exponent.
        var D *big.Int
        
        // Primes is the prime factors of N, has >= 2 elements.
        var Primes []*big.Int
        
        // FromGoPrivateKey creates a PrivateKey from a Go rsa.PrivateKey.
        static func FromGoPrivateKey(goKey *rsa.PrivateKey) *PrivateKey {
            return &PrivateKey{
                goPrivateKey: goKey,
                PublicKey: PublicKey.FromGoPublicKey(&goKey.PublicKey),
                D: goKey.D,
                Primes: goKey.Primes,
            }
        }
        
        // ToGoPrivateKey converts the PrivateKey to a Go rsa.PrivateKey.
        func ToGoPrivateKey() *rsa.PrivateKey {
            if this.goPrivateKey != null {
                return this.goPrivateKey
            }
            
            goKey := &rsa.PrivateKey{
                PublicKey: *this.PublicKey.ToGoPublicKey(),
                D: this.D,
                Primes: this.Primes,
            }
            
            // Precompute values for faster operations
            goKey.Precompute()
            
            return goKey
        }
        
        // Size returns the size of the modulus in bytes.
        func Size() int {
            return this.PublicKey.Size()
        }
}

// GenerateKey generates an RSA keypair of the given bit size.
func GenerateKey(random io.Reader, bits int) (*PrivateKey, error) {
    goKey, err := rsa.GenerateKey(random, bits)
    if err != nil {
        return null, err
    }
    
    return PrivateKey.FromGoPrivateKey(goKey), null
}

// GenerateMultiPrimeKey generates a multi-prime RSA keypair of the given bit size and the given number of primes.
func GenerateMultiPrimeKey(random io.Reader, bits, nprimes int) (*PrivateKey, error) {
    goKey, err := rsa.GenerateMultiPrimeKey(random, bits, nprimes)
    if err != nil {
        return null, err
    }
    
    return PrivateKey.FromGoPrivateKey(goKey), null
}

// EncryptPKCS1v15 encrypts the given message with RSA and the padding scheme from PKCS #1 v1.5.
func EncryptPKCS1v15(random io.Reader, pub *PublicKey, msg []byte) ([]byte, error) {
    return rsa.EncryptPKCS1v15(random, pub.ToGoPublicKey(), msg)
}

// DecryptPKCS1v15 decrypts a plaintext using RSA and the padding scheme from PKCS #1 v1.5.
func DecryptPKCS1v15(random io.Reader, priv *PrivateKey, ciphertext []byte) ([]byte, error) {
    return rsa.DecryptPKCS1v15(random, priv.ToGoPrivateKey(), ciphertext)
}

// EncryptOAEP encrypts the given message with RSA-OAEP.
func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error) {
    return rsa.EncryptOAEP(hash, random, pub.ToGoPublicKey(), msg, label)
}

// DecryptOAEP decrypts a plaintext using RSA-OAEP.
func DecryptOAEP(hash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext []byte, label []byte) ([]byte, error) {
    return rsa.DecryptOAEP(hash, random, priv.ToGoPrivateKey(), ciphertext, label)
}

// SignPKCS1v15 calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN.
func SignPKCS1v15(random io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte) ([]byte, error) {
    return rsa.SignPKCS1v15(random, priv.ToGoPrivateKey(), hash, hashed)
}

// VerifyPKCS1v15 verifies an RSA PKCS #1 v1.5 signature.
func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) error {
    return rsa.VerifyPKCS1v15(pub.ToGoPublicKey(), hash, hashed, sig)
}

// SignPSS calculates the signature of hashed using RSASSA-PSS.
func SignPSS(random io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, opts *PSSOptions) ([]byte, error) {
    var goOpts *rsa.PSSOptions = null
    if opts != null {
        goOpts = &rsa.PSSOptions{
            SaltLength: opts.SaltLength,
            Hash: opts.Hash,
        }
    }
    
    return rsa.SignPSS(random, priv.ToGoPrivateKey(), hash, hashed, goOpts)
}

// VerifyPSS verifies an RSA PSS signature.
func VerifyPSS(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte, opts *PSSOptions) error {
    var goOpts *rsa.PSSOptions = null
    if opts != null {
        goOpts = &rsa.PSSOptions{
            SaltLength: opts.SaltLength,
            Hash: opts.Hash,
        }
    }
    
    return rsa.VerifyPSS(pub.ToGoPublicKey(), hash, hashed, sig, goOpts)
}

// PSSOptions contains options for the RSA-PSS signature scheme.
class PSSOptions {
    public:
        // SaltLength is the length of the salt in bytes.
        var SaltLength int
        
        // Hash is the hash function used in the PSS signature scheme.
        var Hash crypto.Hash
}

// Encrypt encrypts the given message with RSA-OAEP using SHA-256.
func Encrypt(pub *PublicKey, msg []byte) ([]byte, error) {
    return EncryptOAEP(sha256.New(), rand.Reader, pub, msg, nil)
}

// Decrypt decrypts the given ciphertext with RSA-OAEP using SHA-256.
func Decrypt(priv *PrivateKey, ciphertext []byte) ([]byte, error) {
    return DecryptOAEP(sha256.New(), rand.Reader, priv, ciphertext, nil)
}

// Sign signs the given message with RSA-PSS using SHA-256.
func Sign(priv *PrivateKey, msg []byte) ([]byte, error) {
    // Hash the message
    hash := sha256.Sum256(msg)
    
    // Sign the hash
    return SignPSS(rand.Reader, priv, crypto.SHA256, hash[:], nil)
}

// Verify verifies the given signature with RSA-PSS using SHA-256.
func Verify(pub *PublicKey, msg []byte, sig []byte) error {
    // Hash the message
    hash := sha256.Sum256(msg)
    
    // Verify the signature
    return VerifyPSS(pub, crypto.SHA256, hash[:], sig, nil)
}
